# shell configures, both zsh & bash

# proxy
if [ -f $HOME/.dot/proxy.default ]; then
    . $HOME/.dot/proxy.default
fi

[[ -s "$HOME/.dot/proxy" ]] && source $HOME/.dot/proxy

[[ -s "$HOME/.dot/os.spec" ]] && source $HOME/.dot/os.spec

# dev env
[[ -s "$HOME/.dot/devenv" ]] && source $HOME/.dot/devenv

alias ls='ls --group-directories-first --color=auto'
alias ll='ls -halF'
alias la='ls -A'
alias l='ls -CF'
alias sl='ls'

# fasd
# eval "$(fasd --init auto)"

# alias
# alias a='fasd -a'        # any
# alias s='fasd -si'       # show / search / select
# alias d='fasd -d'        # directory
# alias f='fasd -f'        # file
# alias sd='fasd -sid'     # interactive directory selection
# alias sf='fasd -sif'     # interactive file selection
# alias z='fasd_cd -d'     # cd, same functionality as j in autojump
# alias zz='fasd_cd -d -i' # cd with interactive selection
# alias zz='zz'
alias zh='z -I -t .' # most recently accessed path
alias ch='z -I -t .' # most recently accessed path
alias d='z -I -t .' # most recently accessed path
alias ds='z -I -c -t .' # most recently accessed path
alias zz='z -c'      # restrict matches to subdirs of $PWD
alias zi='z -i'      # cd with interactive selection
alias zf='z -I'      # use fzf to select in multiple matches
alias zb='z -b'      # quickly cd to the parent directory

# TODO: opensuse only
alias zup='sudo zypper update'
alias zref='sudo zypper refresh'
alias zse='sudo zypper search'
alias zin='sudo zypper install'
alias zinfo='sudo zypper info'
alias zsi='sudo zypper source-install'
alias zrm='sudo zypper remove'

# apt alis
alias aup='sudo apt update'
alias aupg='sudo apt upgrade'
alias ase='sudo apt search'
alias ain='sudo apt install'
alias ainfo='sudo apt show'
alias asi='sudo apt build-dep'

# dnf alias
alias dup='sudo dnf update'
alias dupg='sudo dnf upgrade'
alias dse='sudo dnf search'
alias din='sudo dnf install'
alias dinfo='sudo dnf info'
alias dsi='sudo dnf builddep'

alias e='TERM=xterm-24bit ec'
# alias em='TERM=screen-16color emacs -nw'
alias em='TERM=xterm-24bit emacs -nw'
# alias emc='emacsclient -nw'
# alias enc='emacsclient -nc'
# alias eb='emacs &'

function en {
        files="$@"
        files=${files:-"$PWD"}
        emacsclient -nc $files
}

function ec {
        files="$@"
        files=${files:-"$PWD"}
        emacsclient -nw $files
}

function eb {
        files="$@"
        files=${files:-"$PWD"}
        emacs $files &
}


# alias vi='nvim'
alias vi='vim'
alias nvi='nvim'
alias svi='sudo vi'
alias za='zathura --fork $@'
alias lg='lazygit'
alias pg='ps aux | grep -i'
alias grr='cd $(git rev-parse --show-cdup)'
# cd to project root
alias rr='cd $(git rev-parse --show-cdup)'
alias ports='netstat -tulanp'
alias sudo='TERM=xterm-256color sudo'

# alias bat
# alias bat='bat --theme "Monokai Extended Light"'
# alias less=bat

# utils
alias mkcd='foo(){ mkdir -p "$1"; cd "$1" }; foo '
alias lsmount='mount |column -t'

# fkill - kill processes - list only the ones you can kill. Modified the earlier script.
fkill() {
    local pid
    if [ "$UID" != "0" ]; then
        pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
    else
        pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
    fi

    if [ "x$pid" != "x" ]
    then
        echo $pid | xargs kill -${1:-9}
    fi
}

alias fk='fkill'

# alias ssh
alias ssh='TERM=xterm-256color ssh'

# fzf
_gen_fzf_default_opts() {

local color00='#fdf6e3'
local color01='#eee8d5'
local color02='#93a1a1'
local color03='#839496'
local color04='#657b83'
local color05='#586e75'
local color06='#073642'
local color07='#002b36'
local color08='#dc322f'
local color09='#cb4b16'
local color0A='#b58900'
local color0B='#859900'
local color0C='#2aa198'
local color0D='#268bd2'
local color0E='#6c71c4'
local color0F='#d33682'

export FZF_DEFAULT_OPTS="
  --height 40% --border
  --color=bg+:$color01,bg:$color00,spinner:$color0C,hl:$color0D
  --color=fg:$color04,header:$color0D,info:$color0A,pointer:$color0C
  --color=marker:$color0C,fg+:$color06,prompt:$color0A,hl+:$color0D
"
}

# _gen_fzf_default_opts
export FZF_DEFAULT_OPTS='
  --color fg:240,bg:230,hl:33,fg+:241,bg+:221,hl+:33
  --color info:33,prompt:33,pointer:166,marker:166,spinner:33
'

# history size
export HISTSIZE=200000

# not to be disturbed by Ctrl-S ctrl-Q in terminals:
stty -ixon

# load tool
case $(ps -p $$) in
*zsh)
  [ -f $HOME/.dot/tools.zsh ] && source $HOME/.dot/tools.zsh
  ;;
*bash)
   # assume Bash
  [ -f $HOME/.dot/tools.bash ] && source $HOME/.dot/tools.bash
   ;;
*)
   # assume something else
esac

[ -s $HOME/.cht.sh ] && alias c='cht.sh'

if [ -f /usr/bin/src-hilite-lesspipe.sh ]; then
    export LESSOPEN="| /usr/bin/src-hilite-lesspipe.sh %s"
    export LESS=" -R "
    export LESS_TERMCAP_so=$'\E[43;30m'
fi

# plan9 dircolor
if [ -f $HOME/.dot/PLAN9_DIR_COLOR ]; then
     eval $(dircolors -b $HOME/.dot/PLAN9_DIR_COLOR)
fi

# brew
function brew() {
    PATH="/home/linuxbrew/.linuxbrew/bin:$PATH" /home/linuxbrew/.linuxbrew/bin/brew "$@"
}

function brew_disable() {
 export PATH=${PATH##*"/.linuxbrew/bin:"}
 export PATH=${PATH##*"/.linuxbrew/sbin:"}
 export MANPATH=${MANPATH##*"/.linuxbrew/share/man:"}
 export INFOPATH=${INFOPATH##*"/.linuxbrew/share/info:"}
}

function brew_enable() {
 BREW='/home/linuxbrew/.linuxbrew'
 brew_disable
 export PATH="$BREW/bin:$BREW/sbin:$PATH"
 export MANPATH="$BREW/share/man:$MANPATH"
 export INFOPATH="$BREW/share/info:$INFOPATH"
 export HOMEBREW_NO_AUTO_UPDATE=1
}

# LESS
export LESS_TERMCAP_mb=$'\E[1m\E[32m'
export LESS_TERMCAP_mh=$'\E[2m'
export LESS_TERMCAP_mr=$'\E[7m'
export LESS_TERMCAP_md=$'\E[1m\E[36m'
export LESS_TERMCAP_ZW=""
export LESS_TERMCAP_us=$'\E[4m\E[1m\E[37m'
export LESS_TERMCAP_me=$'\E(B\E[m'
export LESS_TERMCAP_ue=$'\E[24m\E(B\E[m'
export LESS_TERMCAP_ZO=""
export LESS_TERMCAP_ZN=""
export LESS_TERMCAP_se=$'\E[27m\E(B\E[m'
export LESS_TERMCAP_ZV=""
export LESS_TERMCAP_so=$'\E[1m\E[33m\E[44m'

# 自动解压：判断文件后缀名并调用相应解压命令
function q-extract() {
    if [ -f $1 ] ; then
        case $1 in
        *.tar.bz2)   tar -xvjf $1    ;;
        *.tar.gz)    tar -xvzf $1    ;;
        *.tar.xz)    tar -xvJf $1    ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       rar x $1       ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar -xvf $1     ;;
        *.tbz2)      tar -xvjf $1    ;;
        *.tgz)       tar -xvzf $1    ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)           echo "don't know how to extract '$1'..." ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

# 自动压缩：判断后缀名并调用相应压缩程序
function q-compress() {
    if [ -n "$1" ] ; then
        FILE=$1
        case $FILE in
        *.tar) shift && tar -cf $FILE $* ;;
        *.tar.bz2) shift && tar -cjf $FILE $* ;;
        *.tar.xz) shift && tar -cJf $FILE $* ;;
        *.tar.gz) shift && tar -czf $FILE $* ;;
        *.tgz) shift && tar -czf $FILE $* ;;
        *.zip) shift && zip $FILE $* ;;
        *.rar) shift && rar $FILE $* ;;
        esac
    else
        echo "usage: q-compress <foo.tar.gz> ./foo ./bar"
    fi
}

# 漂亮的带语法高亮的 color cat ，需要先 pip install pygments
function ccat() {
    local style="monokai"
    if [ $# -eq 0 ]; then
        pygmentize -P style=$style -P tabsize=4 -f terminal256 -g
    else
        for NAME in $@; do
            pygmentize -P style=$style -P tabsize=4 -f terminal256 -g "$NAME"
        done
    fi
}

# man
man() {
    LESS_TERMCAP_md=$'\e[01;31m' \
    LESS_TERMCAP_me=$'\e[0m' \
    LESS_TERMCAP_se=$'\e[0m' \
    LESS_TERMCAP_so=$'\e[01;44;33m' \
    LESS_TERMCAP_ue=$'\e[0m' \
    LESS_TERMCAP_us=$'\e[01;32m' \
    command man "$@"
}
